// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Empty
	KeySelection
	Address
	Height
	Balances
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyPurpose int32

const (
	KeyPurpose_INTERNAL KeyPurpose = 0
	KeyPurpose_EXTERNAL KeyPurpose = 1
)

var KeyPurpose_name = map[int32]string{
	0: "INTERNAL",
	1: "EXTERNAL",
}
var KeyPurpose_value = map[string]int32{
	"INTERNAL": 0,
	"EXTERNAL": 1,
}

func (x KeyPurpose) String() string {
	return proto.EnumName(KeyPurpose_name, int32(x))
}
func (KeyPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KeySelection struct {
	Purpose KeyPurpose `protobuf:"varint,1,opt,name=purpose,enum=pb.KeyPurpose" json:"purpose,omitempty"`
}

func (m *KeySelection) Reset()                    { *m = KeySelection{} }
func (m *KeySelection) String() string            { return proto.CompactTextString(m) }
func (*KeySelection) ProtoMessage()               {}
func (*KeySelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeySelection) GetPurpose() KeyPurpose {
	if m != nil {
		return m.Purpose
	}
	return KeyPurpose_INTERNAL
}

type Address struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Address) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Height struct {
	Height uint32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *Height) Reset()                    { *m = Height{} }
func (m *Height) String() string            { return proto.CompactTextString(m) }
func (*Height) ProtoMessage()               {}
func (*Height) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Height) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Balances struct {
	Confirmed   uint64 `protobuf:"varint,1,opt,name=confirmed" json:"confirmed,omitempty"`
	Unconfirmed uint64 `protobuf:"varint,2,opt,name=unconfirmed" json:"unconfirmed,omitempty"`
}

func (m *Balances) Reset()                    { *m = Balances{} }
func (m *Balances) String() string            { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()               {}
func (*Balances) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Balances) GetConfirmed() uint64 {
	if m != nil {
		return m.Confirmed
	}
	return 0
}

func (m *Balances) GetUnconfirmed() uint64 {
	if m != nil {
		return m.Unconfirmed
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*KeySelection)(nil), "pb.KeySelection")
	proto.RegisterType((*Address)(nil), "pb.Address")
	proto.RegisterType((*Height)(nil), "pb.Height")
	proto.RegisterType((*Balances)(nil), "pb.Balances")
	proto.RegisterEnum("pb.KeyPurpose", KeyPurpose_name, KeyPurpose_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	ChainTip(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Height, error)
	Balance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balances, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := grpc.Invoke(ctx, "/pb.API/CurrentAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ChainTip(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Height, error) {
	out := new(Height)
	err := grpc.Invoke(ctx, "/pb.API/ChainTip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Balance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balances, error) {
	out := new(Balances)
	err := grpc.Invoke(ctx, "/pb.API/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Stop(context.Context, *Empty) (*Empty, error)
	CurrentAddress(context.Context, *KeySelection) (*Address, error)
	ChainTip(context.Context, *Empty) (*Height, error)
	Balance(context.Context, *Empty) (*Balances, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CurrentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CurrentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CurrentAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CurrentAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ChainTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ChainTip(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Balance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _API_Stop_Handler,
		},
		{
			MethodName: "CurrentAddress",
			Handler:    _API_CurrentAddress_Handler,
		},
		{
			MethodName: "ChainTip",
			Handler:    _API_ChainTip_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _API_Balance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x91, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0x5b, 0x3e, 0x3e, 0x4a, 0x2f, 0x48, 0xc8, 0x5d, 0x18, 0x43, 0xd4, 0x90, 0xd1, 0x45,
	0xe3, 0xa2, 0x89, 0xb8, 0x71, 0x5b, 0x49, 0x13, 0x11, 0x43, 0x48, 0x61, 0xe1, 0xb6, 0x7f, 0x46,
	0x3b, 0x09, 0xcc, 0x4c, 0xa6, 0xd3, 0x45, 0x9f, 0xc7, 0x17, 0x35, 0x1d, 0x5a, 0x8b, 0xbb, 0x73,
	0xcf, 0xb9, 0x33, 0x99, 0xf3, 0x1b, 0x70, 0x63, 0xc9, 0x7c, 0xa9, 0x84, 0x16, 0xd8, 0x93, 0x09,
	0x71, 0xe0, 0x7f, 0x78, 0x94, 0xba, 0x22, 0xcf, 0x30, 0x5e, 0xd3, 0x6a, 0x47, 0x0f, 0x34, 0xd5,
	0x4c, 0x70, 0xf4, 0xc0, 0x91, 0xa5, 0x92, 0xa2, 0xa0, 0x57, 0xf6, 0xdc, 0xf6, 0x26, 0x8b, 0x89,
	0x2f, 0x13, 0x7f, 0x4d, 0xab, 0xed, 0xc9, 0x8d, 0xda, 0x98, 0xdc, 0x80, 0x13, 0x64, 0x99, 0xa2,
	0x45, 0x81, 0x08, 0xfd, 0x38, 0xcb, 0x94, 0x39, 0xe1, 0x46, 0x46, 0x93, 0x39, 0x0c, 0x5e, 0x29,
	0xfb, 0xca, 0x35, 0x5e, 0xc2, 0x20, 0x37, 0xca, 0xe4, 0x17, 0x51, 0x33, 0x91, 0x37, 0x18, 0xbe,
	0xc4, 0x87, 0x98, 0xa7, 0xb4, 0xc0, 0x6b, 0x70, 0x53, 0xc1, 0x3f, 0x99, 0x3a, 0xd2, 0xcc, 0xac,
	0xf5, 0xa3, 0xce, 0xc0, 0x39, 0x8c, 0x4a, 0xde, 0xe5, 0x3d, 0x93, 0x9f, 0x5b, 0x0f, 0x1e, 0x40,
	0xf7, 0x46, 0x1c, 0xc3, 0x70, 0xb5, 0xd9, 0x87, 0xd1, 0x26, 0x78, 0x9f, 0x5a, 0xf5, 0x14, 0x7e,
	0x34, 0x93, 0xbd, 0xf8, 0xb6, 0xe1, 0x5f, 0xb0, 0x5d, 0xe1, 0x2d, 0xf4, 0x77, 0x5a, 0x48, 0x74,
	0xeb, 0x7e, 0x86, 0xc5, 0xac, 0x93, 0xc4, 0xc2, 0x47, 0x98, 0x2c, 0x4b, 0xa5, 0x28, 0xd7, 0x6d,
	0xcb, 0x69, 0x43, 0xe2, 0x17, 0xd6, 0x6c, 0x54, 0x3b, 0x4d, 0x4c, 0x2c, 0xbc, 0x83, 0xe1, 0x32,
	0x8f, 0x19, 0xdf, 0xb3, 0x3f, 0xd7, 0x42, 0x2d, 0x4f, 0x2c, 0x88, 0x85, 0xf7, 0xe0, 0x34, 0xad,
	0xcf, 0x77, 0xc6, 0xb5, 0x6c, 0x69, 0x10, 0x2b, 0x19, 0x98, 0xaf, 0x7a, 0xfa, 0x09, 0x00, 0x00,
	0xff, 0xff, 0xf9, 0x7f, 0xeb, 0xf4, 0xb7, 0x01, 0x00, 0x00,
}
